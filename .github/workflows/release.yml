name: Release

concurrency: release

on:
  push:
    branches:
      - main
      - build/use-cibuildwheel
    tags:
      - "**"

jobs:
  release-file-check:
    name: Get information about release
    runs-on: ubuntu-latest

    outputs:
      changelog: ${{ steps.release-check.outputs.changelog }}
      status: ${{ steps.release-check.outputs.release_status }}
      change_type: ${{ steps.release-check.outputs.change_type }}

    steps:
      - uses: actions/checkout@v1

      - name: Release file check
        uses: ./.github/release-check-action
        id: release-check

  bump:
    name: bump version
    needs: release-file-check
    runs-on: ubuntu-latest
    if: "${{ needs.release-file-check.outputs.status == 'OK' }} && (startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install deps
        run: |
          python -m pip install pip --upgrade
          pip install githubrelease httpx twine

      - name: bump
        if: steps.check_release.outputs.release == ''
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          git remote set-url origin https://${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}
          autopub prepare
          autopub commit

  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    needs: bump
    if: "success() && (startsWith(github.ref, 'refs/tags/')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ["7", "8", "9", "10"]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install deps
        run: |
          pip install -U cibuildwheel twine

      - name: Build sdist
        if: matrix.os == 'ubuntu' && matrix.python-version == '9'
        run: |
          pip install poetry
          poetry build --format sdist

      - name: Build wheel
        run: cibuildwheel --output-dir dist
        env:
          PIP: "pip"
          CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
          CIBW_BEFORE_BUILD: "pip install -U Cython"

      - name: list dist files
        run: |
          ${{ matrix.ls || 'ls -lh' }} dist/
          twine check dist/*

      - name: Store wheel artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pypi_files
          path: dist

  deploy:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install deps
        run: |
          python -m pip install pip --upgrade
          pip install githubrelease httpx twine
          pip install "git+https://github.com/patrick91/autopub.git@fix/release-not-found#egg=autopub"

      - name: get dist artifacts
        uses: actions/download-artifact@v2
        with:
          name: pypi_files
          path: dist

      - name: twine check
        run: |
          twine check dist/*
          ls -lh dist

      - name: Check if we should release
        id: check_release
        run: |
          set +e
          echo ::set-output name=release::$(autopub check)

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          git remote set-url origin https://${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}
          autopub githubrelease

      - name: Get project version
        id: get-version
        shell: python
        run: |
          from autopub.base import get_project_version
          print(f"::set-output name=version::{get_project_version()}")
