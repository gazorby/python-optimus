name: Release

concurrency: release

on:
  push:
    branches:
      - main
      - build/use-cibuildwheel

jobs:
  release-file-check:
    name: Get information about release
    runs-on: ubuntu-latest

    outputs:
      changelog: ${{ steps.release-check.outputs.changelog }}
      status: ${{ steps.release-check.outputs.release_status }}
      change_type: ${{ steps.release-check.outputs.change_type }}

    steps:
      - uses: actions/checkout@v1

      - name: Release file check
        uses: ./.github/release-check-action
        id: release-check

  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu , macos , windows]
        python-version: ['7', '8', '9', '10']
        include:
        - os: ubuntu
          platform: linux
        - os: windows
          ls: dir

    runs-on: ${{ matrix.os }}-latest
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install deps
      run: |
        pip install -U cibuildwheel

    - name: Build sdist
      run: cibuildwheel --output-dir dist
      env:
        PIP: 'pip'
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
        CIBW_BEFORE_BUILD: 'pip install -U Cython'

    - name: Store dist artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pypi_files
        path: dist

  deploy:
    name: Release
    runs-on: ubuntu-latest
    needs: [release-file-check, build]
    if: ${{ needs.release-file-check.outputs.status == 'OK' }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: get dist artifacts
        uses: actions/download-artifact@v2
        with:
          name: pypi_files
          path: dist

      - name: Install deps
        run: |
          python -m pip install pip --upgrade
          pip install poetry githubrelease httpx
          pip install "git+https://github.com/patrick91/autopub.git@fix/release-not-found#egg=autopub"

      - name: Check if we should release
        id: check_release
        run: |
          set +e
          echo ::set-output name=release::$(autopub check)

      - name: Publish
        if: steps.check_release.outputs.release == ''
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          git remote set-url origin https://${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}
          autopub prepare
          poetry build
          autopub commit
          autopub githubrelease
          poetry publish --username __token__

      - name: Get project version
        id: get-version
        shell: python
        run: |
          from autopub.base import get_project_version
          print(f"::set-output name=version::{get_project_version()}")
